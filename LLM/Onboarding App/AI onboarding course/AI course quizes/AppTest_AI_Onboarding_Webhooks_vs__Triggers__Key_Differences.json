{
  "name": "AppTest AI Onboarding Webhooks vs. Triggers: Key Differences",
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/ai/tests/WebhooksVsTriggersKeyDifferences",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "4b60ad6e-4c09-41b9-905c-4a8758b34510",
      "name": "Webhook",
      "webhookId": "f3dee072-3ea5-43df-8609-48a2a1bd9a91"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Webhooks vs. Triggers: Key Differences</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    #taskContainer {\n      margin-top: 2rem;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Webhooks vs. Triggers: Key Differences</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startExamBtn\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Webhooks vs. Triggers: Key Differences</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"All\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Quiz Questions -->\n\n      <!-- Section: Push vs. Pull Mechanism (Webhooks Send Data vs. Triggers Check Conditions) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. What is the main difference between webhooks and triggers?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"A\" data-correct=\"true\"> a) Webhooks push data automatically, while triggers check conditions before executing</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"B\"> b) Triggers always work in real-time, while webhooks require manual activation</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"C\"> c) Webhooks require scheduled execution, while triggers work only with external APIs</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"D\"> d) Triggers send data to external services without checking conditions</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Which mechanism do webhooks use to send data?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"A\"> a) Pull mechanism</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"B\" data-correct=\"true\"> b) Push mechanism</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"C\"> c) Manual request mechanism</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"D\"> d) Batch processing</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. How do triggers typically work in automation?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"A\" data-correct=\"true\"> a) They monitor predefined conditions and execute an action when met</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"B\"> b) They send data immediately without any conditions</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"C\"> c) They require a user to manually activate them</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"D\"> d) They only work with webhooks</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. Which of the following best describes how a webhook functions?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"A\" data-correct=\"true\"> a) It sends data as soon as an event occurs</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"B\"> b) It waits for an API request before sending data</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"C\"> c) It checks for new data at regular intervals</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"D\"> d) It requires manual activation for every event</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Which scenario best demonstrates when to use a trigger instead of a webhook?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"A\"> a) Sending a notification as soon as a form is submitted</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"B\" data-correct=\"true\"> b) Checking every hour for new leads and updating a CRM</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"C\"> c) Instantly confirming a payment and updating an order status</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"D\"> d) Receiving a real-time alert when a website form is filled</label>\n      </div>\n\n      <!-- Section: Real-Time Updates vs. Scheduled Automation -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. How do webhooks handle data updates?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"A\" data-correct=\"true\"> a) They provide real-time updates by pushing data instantly</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"B\"> b) They check for updates only at scheduled intervals</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"C\"> c) They require manual approval before sending data</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"D\"> d) They store updates but do not send them automatically</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. How do triggers handle data updates?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"A\"> a) They send data as soon as an event occurs</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"B\" data-correct=\"true\"> b) They run at predefined intervals to check conditions</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"C\"> c) They cannot be scheduled</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"D\"> d) They only work with APIs that support push notifications</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Which type of automation is best suited for webhooks?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"A\" data-correct=\"true\"> a) Real-time event-driven processes</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"B\"> b) Scheduled reports that run once a day</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"C\"> c) Weekly status updates on project progress</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"D\"> d) Checking for data updates at fixed intervals</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Which of the following is a limitation of triggers compared to webhooks?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"A\"> a) Triggers always work in real time</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"B\" data-correct=\"true\"> b) Triggers may introduce delays because they rely on scheduled checks</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"C\"> c) Triggers do not support automation workflows</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"D\"> d) Triggers require external services to push data</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. When should a webhook be used instead of a trigger?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"A\"> a) When checking for updates periodically</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"B\" data-correct=\"true\"> b) When real-time data updates are required</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"C\"> c) When running batch data processing</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"D\"> d) When automating a daily report</label>\n      </div>\n\n      <!-- Section: Best Use Cases for Webhooks vs. Triggers -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Which of the following is a good use case for webhooks?</h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"A\" data-correct=\"true\"> a) Sending an instant notification when a customer submits a form</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"B\"> b) Running a report every morning at 8 AM</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"C\"> c) Checking for email responses every hour</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"D\"> d) Manually reviewing new data before sending a notification</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Which of the following is a good use case for triggers?</h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"A\"> a) Processing a payment immediately after a customer purchase</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"B\" data-correct=\"true\"> b) Checking a database every 30 minutes to update records</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"C\"> c) Sending a message instantly when a new chat request is received</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"D\"> d) Live-streaming user activity updates</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Why are webhooks preferred for customer notifications?</h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"A\" data-correct=\"true\"> a) They deliver updates instantly when an event occurs</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"B\"> b) They only work with scheduled tasks</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"C\"> c) They require users to manually refresh their data</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"D\"> d) They are slower than triggers</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Why are triggers useful for recurring automation tasks?</h3>\n        <label><input type=\"radio\" name=\"q14\" value=\"A\"> a) They execute actions only when manually activated</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"B\" data-correct=\"true\"> b) They allow businesses to automate processes that don’t need real-time updates</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"C\"> c) They are required for all API integrations</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"D\"> d) They prevent scheduled automation from running frequently</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Which automation example correctly matches the best tool?</h3>\n        <label><input type=\"radio\" name=\"q15\" value=\"A\" data-correct=\"true\"> a) Webhook: Sending an order confirmation email immediately after purchase</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"B\"> b) Webhook: Running an inventory check every night</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"C\"> c) Trigger: Updating a customer’s status as soon as they submit a form</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"D\"> d) Trigger: Sending an email as soon as a payment is made</label>\n      </div>\n\n      <button id=\"submitBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <!-- Container for Task Instructions -->\n  <div id=\"taskContainer\"></div>\n\n  <script>\n    // Fisher–Yates shuffle function\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n\n    // Randomize answer labels (excluding the user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(label => label.parentNode.removeChild(label));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(label => heading.parentNode.appendChild(label));\n      });\n    }\n\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes\n    const examName = \"Webhooks vs. Triggers: Key Differences\";\n\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n    window.startQuiz = startQuiz;\n\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const rem = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(rem).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n\n    function formatDate(date) {\n      const options = {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n      };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n\n    function calculateScore(timeout = false) {\n      const submitButton = document.getElementById('submitBtn');\n      if (submitButton) {\n        submitButton.style.display = 'none';\n      }\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return;\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsed = `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n      \n      let resultsHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultsHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='#'\">Read Again</button> `;\n      document.getElementById('result').innerHTML = resultsHTML;\n      \n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      \n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"5\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: seconds,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n      \n      try {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n        fetch(\"https://auto.crm-s.com/webhook/Onboarding/Update\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json, text/plain, */*\"\n          },\n          body: JSON.stringify(postData),\n          mode: \"cors\"\n        })\n        .then(async (res) => {\n          console.log(\"POST response status:\", res.status);\n          const text = await res.text();\n          console.log(\"POST response body:\", text);\n        })\n        .catch(err => {\n          console.error(\"Error in POST:\", err);\n        });\n      } catch (error) {\n        console.error(\"Error submitting quiz results:\", error);\n      }\n    }\n\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>\n",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        0
      ],
      "id": "51b6d42d-3301-4154-a030-227bd0400eae",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2348eb9f-574c-4969-9f5d-3819e3323c41",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bce7fa653659e581ce25e9a76408cecc1db830bd4c16d1cddb638823b7bca87a"
  },
  "id": "mbLneN15inWtWVvn",
  "tags": [
    {
      "createdAt": "2025-03-03T09:45:59.203Z",
      "updatedAt": "2025-03-03T09:45:59.203Z",
      "id": "Fm7JeKGvgj23tI31",
      "name": "Tests"
    },
    {
      "createdAt": "2025-03-04T10:12:31.735Z",
      "updatedAt": "2025-03-04T10:12:31.735Z",
      "id": "HTfjYUz6vEtXNRrq",
      "name": "Day5"
    },
    {
      "createdAt": "2025-03-04T15:18:45.103Z",
      "updatedAt": "2025-03-04T15:18:45.103Z",
      "id": "Lv0IHVqEPpRYfyh7",
      "name": "AI Onboarding"
    },
    {
      "createdAt": "2025-02-28T12:15:59.970Z",
      "updatedAt": "2025-02-28T12:15:59.970Z",
      "id": "sdWf5s6naE3QVMN8",
      "name": "Onboarding"
    }
  ]
}