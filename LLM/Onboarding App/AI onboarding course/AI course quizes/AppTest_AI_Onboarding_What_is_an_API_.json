{
  "name": "AppTest AI Onboarding What is an API?",
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/ai/tests/WhatIsAnAPI",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "872e3019-5e06-4c8e-9aa0-8c53514b64d4",
      "name": "Webhook",
      "webhookId": "c195dbb6-0bbb-4418-972c-e360c38753f3"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>What is API?</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    /* Radio buttons (single-answer) */\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    /* Checkboxes (multi-answer) */\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    /* Replace read-only profession input with dropdown */\n    select[name=\"profession\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n      background: #fff;\n      color: #4A4A4A;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>What is API?</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startExamBtn\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>What is API?</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <select name=\"profession\">\n            <option value=\"3d designer\">3d designer</option>\n            <option value=\"account manager\">account manager</option>\n            <option value=\"affiliate manager\">affiliate manager</option>\n            <option value=\"analyst\">analyst</option>\n            <option value=\"animator\">animator</option>\n            <option value=\"back end developer\">back end developer</option>\n            <option value=\"chat operator\">chat operator</option>\n            <option value=\"content manager\">content manager</option>\n            <option value=\"copywriter\">copywriter</option>\n            <option value=\"email marketer\">email marketer</option>\n            <option value=\"event manager\">event manager</option>\n            <option value=\"financial manager\">financial manager</option>\n            <option value=\"front end developer\">front end developer</option>\n            <option value=\"full stack developer\">full stack developer</option>\n            <option value=\"graphic designer\">graphic designer</option>\n            <option value=\"hr manager\">hr manager</option>\n            <option value=\"illustrator\">illustrator</option>\n            <option value=\"influencer manager\">influencer manager</option>\n            <option value=\"interior designer\">interior designer</option>\n            <option value=\"investment manager\">investment manager</option>\n            <option value=\"lead generator\">lead generator</option>\n            <option value=\"linkbuilder\">linkbuilder</option>\n            <option value=\"media buyer\">media buyer</option>\n            <option value=\"mobile developer\">mobile developer</option>\n            <option value=\"mobile video editor\">mobile video editor</option>\n            <option value=\"motion designer\">motion designer</option>\n            <option value=\"personal assistant\">personal assistant</option>\n            <option value=\"ppc specialist\">ppc specialist</option>\n            <option value=\"pr manager\">pr manager</option>\n            <option value=\"project manager\">project manager</option>\n            <option value=\"proofreader\">proofreader</option>\n            <option value=\"qa\">qa</option>\n            <option value=\"recruiter\">recruiter</option>\n            <option value=\"sales manager\">sales manager</option>\n            <option value=\"seo manager\">seo manager</option>\n            <option value=\"social media manager\">social media manager</option>\n            <option value=\"system administrator\">system administrator</option>\n            <option value=\"targetologist\">targetologist</option>\n            <option value=\"tourism manager\">tourism manager</option>\n            <option value=\"ui/ux designer\">ui/ux designer</option>\n            <option value=\"video editor\">video editor</option>\n            <option value=\"web designer\">web designer</option>\n            <option value=\"wordpress designer\">wordpress designer</option>\n          </select>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- New Quiz Questions -->\n\n      <!-- Question 1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. What does API stand for?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"A\"> A) Automated Processing Interface</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"B\" data-correct=\"true\"> B) Application Programming Interface</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"C\"> C) Advanced Protocol Integration</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"D\"> D) Artificial Processing Intelligence</label>\n      </div>\n\n      <!-- Question 2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. What is the main purpose of an API?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"A\" data-correct=\"true\"> A) To allow different applications to communicate with each other</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"B\"> B) To replace programming languages</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"C\"> C) To store large amounts of data</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"D\"> D) To create websites</label>\n      </div>\n\n      <!-- Question 3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. Which of the following is an example of API usage?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"A\"> A) A user manually entering data into a form</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"B\" data-correct=\"true\"> B) A weather app retrieving live weather updates from a remote server</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"C\"> C) A programmer writing a standalone script</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"D\"> D) A computer running an offline program</label>\n      </div>\n\n      <!-- Question 4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. How do APIs improve software development?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"A\" data-correct=\"true\"> A) By enabling developers to use existing services without rebuilding functionality</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"B\"> B) By making software more complex</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"C\"> C) By removing the need for data storage</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"D\"> D) By preventing applications from sharing information</label>\n      </div>\n\n      <!-- Question 5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. What is an API endpoint?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"A\" data-correct=\"true\"> A) A specific URL where an API receives requests</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"B\"> B) The main function of an API</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"C\"> C) A database used for storing API data</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"D\"> D) A physical server location</label>\n      </div>\n\n      <!-- Question 6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. What is an API request?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"A\"> A) A programming language</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"B\" data-correct=\"true\"> B) A message sent to an API asking for data or action</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"C\"> C) A type of programming framework</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"D\"> D) A function that stores API keys</label>\n      </div>\n\n      <!-- Question 7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. What is an API response?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"A\"> A) The process of requesting data</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"B\" data-correct=\"true\"> B) The data or message returned by an API after a request</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"C\"> C) The main function of an API key</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"D\"> D) The time it takes for an API to load</label>\n      </div>\n\n      <!-- Question 8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Which HTTP method is commonly used to retrieve data from an API?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"A\" data-correct=\"true\"> A) GET</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"B\"> B) POST</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"C\"> C) DELETE</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"D\"> D) UPDATE</label>\n      </div>\n\n      <!-- Question 9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Which HTTP method is used to send data to an API for processing?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"A\"> A) GET</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"B\" data-correct=\"true\"> B) POST</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"C\"> C) DELETE</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"D\"> D) PATCH</label>\n      </div>\n\n      <!-- Question 10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. What is an API key?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"A\"> A) A programming language</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"B\"> B) A user's personal password</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"C\" data-correct=\"true\"> C) A unique identifier used to authenticate requests to an API</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"D\"> D) A file containing API responses</label>\n      </div>\n\n      <!-- Question 11 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Which of the following is an AI API?</h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"A\"> A) Microsoft Word</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"B\"> B) Google Search</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"C\" data-correct=\"true\"> C) OpenAI API</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"D\"> D) A PDF reader</label>\n      </div>\n\n      <!-- Question 12 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. What does the OpenAI API allow developers to do?</h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"A\" data-correct=\"true\"> A) Integrate AI-powered text generation into their applications</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"B\"> B) Create websites from scratch</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"C\"> C) Store large amounts of user data</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"D\"> D) Replace all human developers</label>\n      </div>\n\n      <!-- Question 13 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. What is the purpose of the Hugging Face API?</h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"A\"> A) To build physical robots</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"B\" data-correct=\"true\"> B) To provide access to AI models for natural language processing</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"C\"> C) To manage cloud databases</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"D\"> D) To create mobile applications</label>\n      </div>\n\n      <!-- Question 14 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. What is the main function of the Stable Diffusion API?</h3>\n        <label><input type=\"radio\" name=\"q14\" value=\"A\" data-correct=\"true\"> A) To generate AI-powered images from text prompts</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"B\"> B) To analyze user behavior in applications</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"C\"> C) To develop database queries</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"D\"> D) To create voice assistants</label>\n      </div>\n\n      <!-- Question 15 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Why are AI APIs useful for businesses?</h3>\n        <label><input type=\"radio\" name=\"q15\" value=\"A\"> A) They eliminate the need for any human employees</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"B\"> B) They make applications harder to use</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"C\" data-correct=\"true\"> C) They enable businesses to integrate AI features without building models from scratch</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"D\"> D) They work only for large tech companies</label>\n      </div>\n\n      <button id=\"submitBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    // Fisher–Yates shuffle function\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n\n    // Randomize answer labels (excluding the user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(label => label.parentNode.removeChild(label));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(label => heading.parentNode.appendChild(label));\n      });\n    }\n\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes\n    const examName = \"What is API?\";\n\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const rem = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(rem).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n\n    // Formats date as \"dd.mm.yyyy hh:mm\"\n    function formatDate(date) {\n      const options = {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n      };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n\n    function calculateScore(timeout = false) {\n      const submitButton = document.getElementById('submitBtn');\n      if (submitButton) {\n        submitButton.style.display = 'none';\n      }\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return; // Skip user info block\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsed = `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n\n      let resultsHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultsHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='#'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultsHTML;\n\n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n\n      // Include the \"day\" parameter so it gets sent to the server\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"2\",  // Changed day parameter to 2\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: seconds,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n\n      try {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n        fetch(\"https://auto.crm-s.com/webhook/Onboarding/Update\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json, text/plain, */*\"\n          },\n          body: JSON.stringify(postData),\n          mode: \"cors\"\n        })\n        .then(async (res) => {\n          console.log(\"POST response status:\", res.status);\n          const text = await res.text();\n          console.log(\"POST response body:\", text);\n        })\n        .catch(err => {\n          console.error(\"Error in POST:\", err);\n        });\n      } catch (error) {\n        console.error(\"Error submitting quiz results:\", error);\n      }\n    }\n\n    // loadTask() replaces the quiz view with task instructions.\n    function loadTask() {\n      // Do not modify this fragment.\n      document.getElementById('quizContainer').classList.add('hidden');\n      const taskMarkdown = `# 🛠 What is API? - Practice Task\n\n🔹 Create an interactive learning scenario to apply basic API concepts. Focus on: \n- Understanding how APIs enable communication between different applications\n- Identifying common HTTP methods (GET, POST, PUT, DELETE) and their appropriate uses\n- Exploring practical examples of API documentation and integration in software development\n\n# ✅  Steps: \n1. Scenario Creation: Design a situation where a simple mobile app requests weather data from a remote server using an API. Include a narrative that explains the role of the API as the intermediary between the mobile app and the weather data provider. Ensure the scenario highlights how the API receives a request (e.g., \"Get current weather\"), processes it, and returns data (e.g., temperature, humidity).\n2. Application of Learning: Provide a list of common HTTP methods (GET, POST, PUT, DELETE). Ask participants to match each method with a specific task in the scenario. This step reinforces understanding of when and why each HTTP method is used.\n3. API Implementation: Create a simple example of API documentation that includes: Endpoint (e.g., https://api.something.com/v1/current), Parameters (List required parameters for example \"temperature\" and \"country\"), Response Format (Describe what the API returns) and Authentication (Briefly note the use of an API key as a security measure)\n4. Reflection: Encourage participants to consider how APIs improve software development by enabling the reuse of existing services, simplifying integration, and reducing the need to build features from scratch. Understand how this API-driven approach can streamline data exchange between different systems in real-world applications.\n\n# ✏️ When finished, mark the checkbox and optionally provide a link to app.diagrams.net or app.napkin.ai that displays the work completed for the practical assignment.`;\n\n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.body.innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem; max-width: 800px; margin: 0 auto;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional link to your work:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://app.napkin.ai/page/...\" style=\"width: 100%; padding: 8px; margin: 4px 0 1rem;\">\n            <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n            <label for=\"taskCompletedCheckbox\">Task Completed</label>\n          </div>\n        </div>\n      `;\n\n      const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n      checkbox.addEventListener(\"change\", function() {\n        if (checkbox.checked) {\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim() || \"\";\n          checkbox.disabled = true;\n          try {\n            fetch(\"https://auto.crm-s.com/webhook/Onboarding/UpdateTaskTable\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json, text/plain, */*\"\n              },\n              body: JSON.stringify({\n                examName: \"What is API?\",\n                day: \"2\",  // Changed day parameter to 2 for task as well\n                link: taskLink,\n                date: formatDate(new Date())\n              }),\n              mode: \"cors\"\n            })\n            .then(async (res) => {\n              console.log(\"Task completed webhook status:\", res.status);\n              const text = await res.text();\n              console.log(\"Task completed webhook body:\", text);\n            })\n            .catch(err => {\n              console.error(\"Error sending task completed webhook:\", err);\n              alert(\"Your task has been marked as complete, but there was an issue connecting to the server. Your instructor will be notified.\");\n            });\n          } catch (error) {\n            console.error(\"Error marking task as complete:\", error);\n            alert(\"Your task has been marked as complete, but there was an issue connecting to the server. Your instructor will be notified.\");\n          }\n        }\n      });\n    }\n\n    // Markdown parser: converts headings (#, ##, ###, ####) into <details> blocks\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        0
      ],
      "id": "66867565-788c-43da-8640-8d6ccef34bd9",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "45754ef3-63da-4c9e-81ce-b12c89db05bc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bce7fa653659e581ce25e9a76408cecc1db830bd4c16d1cddb638823b7bca87a"
  },
  "id": "UalEHYmouRTE1IDd",
  "tags": [
    {
      "createdAt": "2025-03-03T09:45:59.203Z",
      "updatedAt": "2025-03-03T09:45:59.203Z",
      "id": "Fm7JeKGvgj23tI31",
      "name": "Tests"
    },
    {
      "createdAt": "2025-03-03T14:31:08.720Z",
      "updatedAt": "2025-03-03T14:31:08.720Z",
      "id": "HELbjAXco7AikW1p",
      "name": "Day 2"
    },
    {
      "createdAt": "2025-03-04T15:18:45.103Z",
      "updatedAt": "2025-03-04T15:18:45.103Z",
      "id": "Lv0IHVqEPpRYfyh7",
      "name": "AI Onboarding"
    },
    {
      "createdAt": "2025-02-28T12:15:59.970Z",
      "updatedAt": "2025-02-28T12:15:59.970Z",
      "id": "sdWf5s6naE3QVMN8",
      "name": "Onboarding"
    }
  ]
}