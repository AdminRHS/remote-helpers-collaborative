{
  "name": "AppTest AI Onboarding How to Set Up AI Triggers?",
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/ai/tests/HowToSetUpAITriggers",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "64eca0bc-b874-4a6a-b76a-7ee9c35857c0",
      "name": "Webhook",
      "webhookId": "3dab8c71-15f2-4138-84fd-73dcc10969f2"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Trigger-Based AI Automations</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    #taskContainer {\n      margin-top: 2rem;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>How to Set Up AI Triggers?</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startExamBtn\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>How to Set Up AI Triggers?</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"All\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Quiz Questions -->\n\n      <!-- Section: Automating Daily Tasks with AI-Based Triggers -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. What is an AI-based trigger?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"A\" data-correct=\"true\"> a) An event or condition that automatically starts an AI-driven process</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"B\"> b) A manual action performed by a user</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"C\"> c) A basic programming script that runs only when executed manually</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"D\"> d) A feature that stops automation</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Which of the following is an example of an AI-based trigger?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"A\"> a) Manually sending an email to a client</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"B\" data-correct=\"true\"> b) AI automatically generating a response when a customer submits a query</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"C\"> c) A user clicking a button to start a task</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"D\"> d) Writing a report by hand</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. How can AI triggers improve daily productivity?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"A\" data-correct=\"true\"> a) By automating repetitive tasks and reducing manual work</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"B\"> b) By making tasks more complex</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"C\"> c) By slowing down workflows to ensure accuracy</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"D\"> d) By requiring human approval for every step</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. Which tool can be used to set up AI-based automation triggers?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"A\" data-correct=\"true\"> a) Make.com</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"B\"> b) Microsoft Paint</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"C\"> c) Google Slides</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"D\"> d) A text editor</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. What is an example of an AI-triggered workflow in email management?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"A\"> a) Manually organizing emails into folders</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"B\" data-correct=\"true\"> b) Automatically categorizing and replying to emails using AI</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"C\"> c) Checking emails every hour for new messages</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"D\"> d) Deleting all incoming emails manually</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Which AI-based trigger can be used in social media automation?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"A\"> a) AI scheduling posts when engagement is highest</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"B\" data-correct=\"true\"> b) Automatically scheduling posts and generating captions with AI</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"C\"> c) Manually posting updates</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"D\"> d) Responding to comments manually</label>\n      </div>\n\n      <!-- Section: Creating Automated Pipelines with AI -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. What is an automated pipeline?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"A\" data-correct=\"true\"> a) A sequence of automated processes that run based on triggers</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"B\"> b) A document where workflows are written manually</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"C\"> c) A process that requires manual execution for every step</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"D\"> d) A pipeline used only for AI training</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. How do AI triggers help build automated pipelines?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"A\"> a) By requiring manual confirmation for every task</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"B\" data-correct=\"true\"> b) By starting processes automatically when predefined conditions are met</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"C\"> c) By slowing down automation</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"D\"> d) By preventing AI from taking actions autonomously</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Which of these is an example of an API-based automation?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"A\"> a) Manually tracking sales performance</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"B\" data-correct=\"true\"> b) Automatically updating CRM records when a new lead is generated</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"C\"> c) Exporting files manually from one system to another</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"D\"> d) Sending individual emails manually</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. What is an API integration in AI automation?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"A\" data-correct=\"true\"> a) A way to connect AI tools with other applications for seamless workflows</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"B\"> b) A manual method for exporting data</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"C\"> c) A tool for designing images</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"D\"> d) A static software configuration</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. How can AI-driven triggers optimize customer support?</h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"A\"> a) By manually responding to each customer inquiry</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"B\" data-correct=\"true\"> b) By using chatbots that trigger responses based on customer queries</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"C\"> c) By removing live chat support</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"D\"> d) By sending the same response to all customers</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Which trigger tool is best for automating e-commerce workflows?</h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"A\"> a) Canva</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"B\" data-correct=\"true\"> b) Make.com</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"C\"> c) Microsoft Paint</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"D\"> d) Google Docs</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. What type of business processes benefit most from trigger-based AI automations?</h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"A\"> a) Tasks that require constant manual supervision</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"B\" data-correct=\"true\"> b) Repetitive and data-driven workflows</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"C\"> c) Creative brainstorming sessions</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"D\"> d) One-time projects with no automation needs</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Why is it important to choose the right type of trigger in automation?</h3>\n        <label><input type=\"radio\" name=\"q14\" value=\"A\"> a) The type of trigger does not affect automation</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"B\" data-correct=\"true\"> b) Different tasks require different trigger types for efficiency</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"C\"> c) Time-based triggers work for all workflows</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"D\"> d) Manual triggers are always the best option</label>\n      </div>\n\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Why is trigger-based AI automation valuable for businesses?</h3>\n        <label><input type=\"radio\" name=\"q15\" value=\"A\"> a) It replaces human employees entirely</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"B\" data-correct=\"true\"> b) It improves efficiency by automating repetitive tasks</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"C\"> c) It increases the complexity of workflows</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"D\"> d) It only works for large corporations</label>\n      </div>\n\n      <button id=\"submitBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <!-- Container for Task Instructions -->\n  <div id=\"taskContainer\"></div>\n\n  <script>\n    // Fisher–Yates shuffle function\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n\n    // Randomize answer labels (excluding the user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(label => label.parentNode.removeChild(label));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(label => heading.parentNode.appendChild(label));\n      });\n    }\n\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes\n    const examName = \"How to Set Up AI Triggers?\";\n\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n    window.startQuiz = startQuiz;\n\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const rem = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(rem).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n\n    function formatDate(date) {\n      const options = {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n      };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n\n    function calculateScore(timeout = false) {\n      const submitButton = document.getElementById('submitBtn');\n      if (submitButton) {\n        submitButton.style.display = 'none';\n      }\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return;\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsed = `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n      \n      let resultsHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultsHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='#'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultsHTML;\n      \n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      \n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"4\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: seconds,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n      \n      try {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n        fetch(\"https://auto.crm-s.com/webhook/Onboarding/Update\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json, text/plain, */*\"\n          },\n          body: JSON.stringify(postData),\n          mode: \"cors\"\n        })\n        .then(async (res) => {\n          console.log(\"POST response status:\", res.status);\n          const text = await res.text();\n          console.log(\"POST response body:\", text);\n        })\n        .catch(err => {\n          console.error(\"Error in POST:\", err);\n        });\n      } catch (error) {\n        console.error(\"Error submitting quiz results:\", error);\n      }\n    }\n\n    function loadTask() {\n      document.getElementById('quizContainer').classList.add('hidden');\n      const taskMarkdown = `# ⚙️ How to Set Up AI Triggers? - Practice Task\n\n🔹 Design an interactive learning scenario to explore AI-based triggers for automating daily tasks. Focus on:  \n- Defining AI-based triggers and explaining how they automatically start processes based on events, time, or manual actions  \n- Demonstrating practical examples (e.g., auto-email responses, social media posting, meeting summaries)  \n- Building automated pipelines using API integrations that connect various tasks\n\n# ✅ Steps:  \n1. Problem Definition: Create a simple scenario where repetitive daily tasks are automated using AI triggers (Example: When an email with the subject \"urgent\" is received, the system automatically summarizes the email and forwards it to the relevant department)  \n\n2. Analysis Strategy: Identify and explain the three types of triggers (Event-based triggers: activate when a specific event occurs, Time-based triggers: activate on a set schedule, Manual triggers: activate when a user initiates an action), and describe how each trigger functions within the workflow  \n\n3. Selection Criteria: Define the criteria for choosing the appropriate trigger for different tasks (Relevance: how well the trigger matches the task requirements, Frequency: how often the triggering event occurs, Impact: how significantly the automated action improves efficiency), and apply these criteria to decide which trigger is best for tasks such as auto-email responses or social media scheduling\n\n4. Building the Automated Pipeline: Outline the steps of an automated pipeline (Step 1: Identify the trigger event, Step 2: Define the AI action, Step 3: Connect the trigger to the AI action using an automation tool, Step 4: Route the AI-generated output to its destination), and create a flowchart or diagram using tools like app.diagrams.net or app.napkin.ai to visualize the entire pipeline\n\n5. Reflection: Reflect on how AI-based triggers and automated pipelines can reduce manual work, improve task efficiency, and minimize errors (Consider how this automation can be applied in different business areas such as customer service, marketing, or internal operations)\n\n# ✏️ When finished, mark the checkbox and optionally provide a link to app.diagrams.net or app.napkin.ai that displays the work completed for the practical assignment.`;\n\n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.getElementById(\"taskContainer\").innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem; max-width: 800px; margin: 0 auto;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional link to your work:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://app.napkin.ai/page/...\" style=\"width: 100%; padding: 8px; margin: 4px 0 1rem;\">\n            <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n            <label for=\"taskCompletedCheckbox\">Task Completed</label>\n          </div>\n        </div>\n      `;\n      const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n      checkbox.addEventListener(\"change\", function() {\n        if (checkbox.checked) {\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim() || \"\";\n          checkbox.disabled = true;\n          try {\n            fetch(\"https://auto.crm-s.com/webhook/Onboarding/UpdateTaskTable\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json, text/plain, */*\"\n              },\n              body: JSON.stringify({\n                link: taskLink,\n                date: formatDate(new Date())\n              }),\n              mode: \"cors\"\n            })\n            .then(async (res) => {\n              console.log(\"Task completed webhook status:\", res.status);\n              const text = await res.text();\n              console.log(\"Task completed webhook body:\", text);\n            })\n            .catch(err => {\n              console.error(\"Error sending task completed webhook:\", err);\n              alert(\"Your task has been marked as complete, but there was an issue connecting to the server. Your instructor will be notified.\");\n            });\n          } catch (error) {\n            console.error(\"Error marking task as complete:\", error);\n            alert(\"Your task has been marked as complete, but there was an issue connecting to the server. Your instructor will be notified.\");\n          }\n        }\n      });\n    }\n    window.loadTask = loadTask;\n\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>\n",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        0
      ],
      "id": "5685e921-ce20-4b03-a4f8-13335378872e",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "af9dc527-c095-49a4-a900-1f3f765aa9d8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bce7fa653659e581ce25e9a76408cecc1db830bd4c16d1cddb638823b7bca87a"
  },
  "id": "Hy8HbcRwP7Cw3ueW",
  "tags": [
    {
      "createdAt": "2025-03-03T09:45:59.203Z",
      "updatedAt": "2025-03-03T09:45:59.203Z",
      "id": "Fm7JeKGvgj23tI31",
      "name": "Tests"
    },
    {
      "createdAt": "2025-03-04T15:18:45.103Z",
      "updatedAt": "2025-03-04T15:18:45.103Z",
      "id": "Lv0IHVqEPpRYfyh7",
      "name": "AI Onboarding"
    },
    {
      "createdAt": "2025-03-04T14:57:07.293Z",
      "updatedAt": "2025-03-04T14:57:07.293Z",
      "id": "iRLKq9rzctZyiAfs",
      "name": "Day 4"
    },
    {
      "createdAt": "2025-02-28T12:15:59.970Z",
      "updatedAt": "2025-02-28T12:15:59.970Z",
      "id": "sdWf5s6naE3QVMN8",
      "name": "Onboarding"
    }
  ]
}