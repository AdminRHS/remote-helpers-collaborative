https://docs.google.com/document/d/1VC_mgwYvLeQjejTJfjOSYl0wPgqpgCkqDiFyJN5Ansg/edit?tab=t.0#heading=h.8f0lyt7jwlcc

Саммари командного звонка: концепция нового процесса обучения сотрудников

Это подробное саммари собрано из транскрипта внутреннего командного звонка, на котором обсуждалась концепция и техническая реализация нового процесса обучения сотрудников. В отчёте восстановлен логический порядок обсуждения и сфокусировано на сути идей, предложений, принятых решений и ключевых компонентах модели обучения. Ниже представлены основные темы и выводы встречи, без отвлечённых или незначимых реплик, с акцентом на технические и дизайнерские аспекты.
Одностраничные лендинги с геймификацией для каждого урока

На звонке была предложена идея одностраничного лендинга для каждого урока. Это означает, что весь контент одного урока – от теории до заданий – размещается на единой веб-странице. Такой подход отличается от традиционных многостраничных курсов и призван упростить восприятие материала. Команда считает, что одностраничный формат позволит сотрудникам не переключаться между разными экранами, а последовательно прокручивать материал, сохраняя фокус. Геймификация внедряется прямо на этой странице, чтобы сделать обучение более вовлекающим. В практическом плане это может выражаться в динамических элементах (например, прогресс-бар или анимации) и игровых механиках:
Награды и баллы: За прохождение каждого блока урока пользователю могут начисляться баллы или виртуальные награды.
Обратная связь в реальном времени: Правильные ответы на квиз сразу отмечаются позитивными визуальными эффектами, что стимулирует продолжать.
Мини-игры или интерактивности: В теоретической части могут быть небольшие интерактивные вставки или задания-головоломки, дополняющие текст.
Таким образом, одностраничный лендинг с элементами геймификации должен предоставить ощущение цельного “мини-сценария игры”: от начала урока до его завершения пользователь проходит маленькое приключение, что повышает интерес и мотивацию к обучению.
Структура урока: теория → квиз → практическое задание

Обсуждалась и была утверждена типовая структура каждого урока. Она состоит из трёх последовательных этапов: теория → квиз → тестовое задание. Эта структура станет шаблоном для всех учебных модулей и призвана обеспечить баланс между получением знаний и их проверкой на практике.
Теоретический блок: В начале урока предоставляется теоретический материал. Это может быть текст, изображения, короткие видео или диаграммы – всё, что необходимо для объяснения темы. Команда подчеркнула, что теория должна быть лаконичной и наглядной, избегая излишней информации. Если материал обширный, его планируется разбивать на вкладки или секции внутри страницы, чтобы не перегружать читателя длинным скроллом.
Квиз по материалу: Сразу после теории следует короткий квиз, где сотрудник отвечает на вопросы по только что пройденному материалу. Цель – укрепить усвоение знаний через мгновенную проверку. Обсуждалось, что формат квиза, скорее всего, будет в виде нескольких тестовых вопросов (множественный выбор, верно/неверно и т.п.). Мгновенная обратная связь важна: система должна сразу показывать правильность ответа и давать пояснения, особенно если допущена ошибка. Такой подход геймифицирует обучение и помогает закрепить информацию прежде, чем двигаться дальше.
Практическое (тестовое) задание: В заключение урока пользователь получает более развёрнутое практическое задание. Это может быть кейс, небольшое упражнение или задачка, требующая применить полученные знания. В отличие от квиза, тестовое задание требует либо развернутого ответа, либо выполнения определённых шагов вне системы (например, попробовать новый навык в рабочей ситуации) с последующим отчётом. Обсуждалось, как фиксировать выполнение таких заданий: варианты включают свободное текстовое поле для отчёта, загрузку файла или просто отметку о выполнении. Был поднят вопрос проверки этих заданий – автоматическая или ручная. Предварительно решили, что для первых итераций достаточно, если участник самостоятельно отмечает выполнение (self-check), возможно с примерами правильного решения для самопроверки, поскольку автоматизировать проверку сложных кейсов затруднительно.
Унифицированная структура «теория–квиз–задание» обеспечивает понятный сценарий обучения. Сотрудник сначала получает знания, затем проверяет себя в игровой форме, а затем применяет знания. На звонке отметили, что единообразие структуры упрощает создание контента и привыкание пользователя: пройдя пару уроков, сотрудники будут знать, чего ожидать от следующего.
Визуальный стиль и взаимодействие: прогресс-дорожка, маскот и чекпоинты

Большое внимание уделялось визуальному стилю курса и интерактивности пользовательского интерфейса. Команда рассматривает курс как путешествие для пользователя, поэтому ключевые метафоры – дорожка прогресса, маскот и чекпоинты. Дорожка прогресса: Был предложен визуальный элемент в виде пути или тропинки, символизирующей прохождение учебного маршрута. Каждый урок представлен как отрезок пути на этой дорожке. По мере продвижения сотрудника дорожка заполняется цветом или другой индикацией, показывая, сколько уже пройдено и что ещё впереди. Идея в том, чтобы у пользователя было наглядное представление о своём прогрессе в программе обучения. Например, на начале страницы курса может быть изображена карта или схема маршрута с отмеченными уроками как точками на пути. Чекпоинты выступают в роли этих точек: окончание каждого урока – это чекпоинт, который отмечается на дорожке (например, флажком или значком). Такой подход добавляет игре элемент достижения цели: каждый чекпоинт – маленькая победа, шаг ближе к завершению всей программы. Маскот: Для оживления интерфейса и установления эмоциональной связи с пользователем решено использовать маскота – условного персонажа, который будет сопровождать обучение. Маскот может выступать в роли виртуального тренера или проводника по курсу. В обсуждении приводились примеры успешных маскотов (вспоминали, как герои в приложениях или брендовые персонажи мотивируют пользователей). Для нашего курса маскот мог бы приветствовать сотрудника в начале, давать советы, подбадривать при прохождении квизов и поздравлять при достижении чекпоинтов. Важно, чтобы персонаж был дружелюбным и соответствовал корпоративному стилю, не выглядел слишком детским, но вызывал позитив. Команда пока не определилась с конкретным образом маскота – есть идеи сделать его стилизованным под сферу деятельности компании или абстрактным «персонажем-наставником». Отмечено, что добавление маскота повысит сложность в части дизайна (нужно отрисовать персонажа в разных позах/эмоциях) и разработки (встраивание этих элементов в страницы), но ожидается значительный выигрыш в вовлечённости пользователей. Интерактивные чекпоинты: Визуальные чекпоинты на дорожке – это не только статические отметки. Планируется сделать их интерактивными. При наведении или клике на чекпоинт пользователь может увидеть информацию: название урока, его статус (пройден/не пройден), а возможно, и краткий итог или награду за его прохождение. Кроме того, после завершения урока чекпоинт может анимированно «зажигаться» или меняться (например, серый значок становится цветным, появляется галочка или трофей), давая ощущение достижения. Команда подчеркнула, что анимации должны быть лёгкими и не отвлекать, а лишь дополнять чувство прогресса. Общий визуальный стиль решено выдержать в единой цветовой гамме, связанной с брендом компании, но более игровой и комфортной для глаз. Также обсуждалось адаптивное поведение: дорожка и маскот должны корректно отображаться как на больших экранах, так и на мобильных устройствах, не мешая чтению основной контента. На данный момент, готовых шаблонов или компонентов для подобного визуального представления у команды нет, что создаёт вызов (подробнее об ограничениях – ниже), однако согласовано, что разработка этих элементов оправдана целями геймификации.
Модульность и шаблоны: универсальные компоненты для повторного использования

Одной из центральных технических тем стала модульность разработки контента. Команда стремится разбить все элементы урока на универсальные компоненты, которые можно повторно использовать. Такой подход обеспечит единообразие пользовательского опыта и упростит создание новых уроков в будущем. Разделение на компоненты: Каждый блок урока рассматривался как отдельный модуль. Например, теоретическая часть может быть компонентом "Карточка теории" с заголовком, текстом и, возможно, изображением. Квиз – компонент "Блок квиза" с вопросами и вариантами ответов. Практическое задание – компонент "Блок задания" с условием задачи и полем для ответа или инструкцией по проверке. Кроме того, вспомогательные элементы (прогресс-дорожка, отображение баллов, подсказки маскота) тоже выделяются в отдельные модульные единицы. Идея в том, что разработчики один раз создают и отлаживают каждый компонент, после чего авторы курса смогут собирать из этих готовых блоков новые страницы уроков, почти как из кубиков конструктора. Шаблон страницы урока: На основе компонентов формируется шаблон одностраничного лендинга урока. Фактически это каркас, куда подставляется конкретное содержание. Шаблон определяет порядок: сперва компонент теории, затем компонент квиза, затем компонент задания, плюс декоративные/геймификационные элементы (дорожка, маскот) в нужных местах. Благодаря шаблону, каждый новый урок будет создаваться быстрее и с меньшей вероятностью ошибок – достаточно подготовить контент (тексты вопросов, ответов, описание задания) и вставить в готовую структуру. На звонке подчеркнули, что шаблон должен быть достаточно гибким, чтобы в случае необходимости можно было отключить какой-то блок или добавить дополнительный (например, если вдруг урок не требует практического задания или наоборот содержит два квиза). Поэтому компоненты должны быть независимыми и взаимозаменяемыми в разумных пределах. Повторное использование и единообразие: Модульный подход также решает проблему реюза – повторного использования. Если в будущих обучающих программах потребуется аналогичная структура, команда сможет переиспользовать существующие компоненты и шаблоны, вместо разработки с нуля. Это экономит время и обеспечивает одинаковый вид и поведение интерфейса во всех обучающих курсах компании. В ходе обсуждения всплыло, что сейчас в компании нет большого набора типовых учебных шаблонов (каждый проект делался довольно уникально), поэтому переход к модульности станет шагом к стандартизации. Отсутствие шаблонов для разных стилей было упомянуто как ограничение: текущий дизайн геймификации – лишь один из возможных стилей, и если когда-либо понадобится другой оформительский стиль для другого курса, придётся создавать новый набор компонентов. Решено заложить возможность стилизации компонентов (например, через CSS-темизацию) так, чтобы менять цвета, шрифт, возможно, иллюстрации маскота, не переписывая логику работы модулей. В итоге договорились, что сначала сфокусируются на реализации одного полного комплекта модулей и шаблона для выбранного стиля (с дорожкой и маскотом). После успешного внедрения и обкатки этого подхода, полученный “каркас” можно будет расширять и адаптировать под другие нужды.
Обсуждение проблем и ограничений

В ходе звонка участники открыто обсудили возможные проблемы и ограничения, с которыми придётся столкнуться при реализации новой модели обучения. Ниже перечислены ключевые вызовы и сложности, на которые обратили внимание, и их суть:
Ограничения генерации контента: Команда отметила, что создание качественного учебного материала – трудоёмкий процесс. Возникла идея использовать автоматическую генерацию (например, посредством ИИ) для черновиков текстов или вопросов квиза. Однако были озвучены опасения: генеративные модели могут допускать неточности, требуют проверки фактов и стилистической правки. Доменные знания компании тоже трудно ожидать от ИИ без обширного обучения на внутренних данных. Таким образом, полностью автоматизировать создание контента не получится – потребуется ручная доработка. Кроме того, был упомянут тонкий момент: если все уроки будут сгенерированы автоматически, они могут получиться однообразными или без живости языка, поэтому важно участие человека для придания материала "человеческого лица". Генерация контента рассматривается скорее как вспомогательный инструмент, а не панацея.
Низкая реюзабельность старых решений: Исторически обучающие материалы в компании создавались без унифицированных шаблонов, поэтому повторное использование ранее созданных элементов затруднено. Этот факт расценен как ограничение: нельзя просто взять и собрать новый курс из кусочков старых – придётся перерабатывать под новую систему. Также, если новый модуль создаётся одним подразделением, пока нет гарантии, что другой отдел сможет легко адаптировать его под себя – нужны стандарты. Принято к сведению, что наряду с технической реализацией нужно будет заниматься документированием и распространением новых подходов внутри компании, чтобы повысить общую реюзабельность контента в будущем.
Отсутствие шаблонов для разных стилей обучения: Как отмечалось в разделе про модульность, на данный момент у команды нет набора готовых шаблонов под разные форматы или стили подачи материала. Новый геймифицированный стиль – первый в своём роде для этой команды. Если возникнет необходимость сделать курс в иной стилистике или для другого сценария обучения (например, без геймификации, или с другим визуальным брендингом), придётся либо сильно дорабатывать текущий шаблон, либо разрабатывать новый с нуля. Это рассматривается как ограничение по масштабируемости решений. Пока решено сконцентрироваться на одном стиле, но закладывать в архитектуру возможность расширения. В частности, обсуждалось, что все наработки должны быть максимально универсальными: например, маскот и игровая дорожка – опциональные компоненты (их можно отключить), структура урока – пригодна и без них, тогда страница будет более классической. Также предложено вести библиотеку шаблонов, куда в будущем можно добавлять новые стили оформления, когда они появятся.
Технические ограничения платформы: Хотя конкретно не детализировалось, упоминались возможные ограничения используемых технологий. Например, ограничения по объёму страницы – если урок одностраничный, он может стать слишком "тяжёлым" (много данных, скриптов) и влиять на скорость загрузки. Нужно оптимизировать изображения, анимации и скрипты. Также проверят, способна ли текущая LMS или веб-платформа компании легко встраивать такой кастомный контент. Возможно, потребуется доработка бэкенда для поддержки отслеживания прогресса, записи результатов квизов и т.д. Ещё одна техническая деталь – кросс-браузерность и адаптивность: надо убедиться, что все игровые элементы (дорожки, маскот) отображаются корректно на разных устройствах. Эти моменты внесены в список рисков и будут прорабатываться на этапе прототипирования.
Поднимая эти проблемы, команда заранее формирует понимание, где потребуются дополнительные ресурсы или решения. В следующем разделе рассмотрены подходы, которые были предложены для преодоления перечисленных ограничений.
Предлагаемые решения и подходы

Для адресации выявленных проблем участники звонка выдвинули ряд решений и подходов. Эти инициативы должны облегчить разработку, улучшить качество контента и автоматизировать рутинные процессы:
Использование генерации контента с пост-правкой: Решено не отказываться полностью от помощи ИИ. Команда планирует использовать инструменты генерации (например, GPT-модели) для черновой подготовки материалов – формулировок теории или вариантов вопросов для квиза. Важно, что такой сгенерированный контент будет обязательно проходить проверку и редактирование экспертом (внутренним методистом или автором курса). Это сэкономит время на первом этапе написания, но сохранит качество на выходе. Кроме того, генерацию можно применять точечно: например, предложить ИИ придумать несколько вариантов формулировки вопроса или набор отвлекающих ответов для теста, из которых уже человек выберет или объединит лучшие. Такой полуавтоматический подход ускорит работу, не жертвуя достоверностью.
Чёткая шаблонная структура уроков: Как упоминалось ранее, введение фиксированной структуры "теория–квиз–задание" само по себе уже решение. Шаблонная структура облегчит жизнь авторам – им предоставят шаблон (возможно, даже документированный пример или форму), куда нужно просто вписать свой материал по шагам. Это снижает риск чего-то упустить и делает уроки взаимозаменяемыми по формату. Было решено подготовить образец урока как эталон: его будут использовать как руководство при создании всех последующих уроков. В этом образце будут показаны и оформительские решения, и примеры текста, и взаимодействия (например, как должен выглядеть объяснение после неверного ответа в квизе). Благодаря этому образцу новые разработчики курса смогут быстрее включиться и создавать контент по заданной кальке.
Структурирование материалов в Markdown: Интересным техническим решением стало предложение хранить и редактировать контент уроков в формате Markdown. Markdown — лёгкий формат разметки, который удобен для авторов (легко читается и пишется) и одновременно хорошо поддаётся автоматической обработке. Команда рассматривает следующую практику: методисты или авторы пишут содержание урока (текст теории, вопросы квиза, варианты ответов, описание задания) в одном Markdown-файле по оговорённой структуре. Например, файл может содержать заголовки для каждого раздела, списки вопросов, разделы для правильных ответов и пояснений. Такой файл можно хранить в системе контроля версий, что позволит отслеживать изменения. Главное преимущество – автоматизация обработки: скрипты или инструменты смогут парсить Markdown и преобразовывать его в нужный формат на сайте (HTML-страницу, интеграцию в LMS и т.п.). Это также связывает с предыдущим пунктом: шаблонная структура урока будет отражена в структуре Markdown-документа (например, определённый синтаксис для вопросов). Ещё плюс: Markdown хорошо интегрируется с генеративными инструментами. Если пользоваться ИИ для черновиков, можно прямо запросить вывод в Markdown-формате, чтобы минимизировать ручное форматирование.
Автоматизация процессов (n8n и др.): Для связывания всего конвейера от контента к опубликованному уроку предложено активно задействовать автоматизацию. В частности, упоминалась платформа n8n – это инструмент для построения автоматических workflows без кода, который может интегрировать разные сервисы. В контексте нашего обучения n8n планируется использовать, например, для таких задач:
Автоматический запуск генерации черновиков контента: по команде или расписанию n8n может обращаться к API OpenAI (ChatGPT) с заранее заготовленными запросами, чтобы сгенерировать основу теории или вопросы. Результат сразу сохраняется, например, в виде Markdown-файла, ожидающего правки.
Конвертация и деплой контента: После того как автор отредактировал Markdown, n8n-воркфлоу мог бы автоматически конвертировать Markdown в HTML/JSON формат, понятный для веб-приложения обучения. Затем этот контент может автоматически размещаться на нужном сервере или в системе управления обучением. Грубо говоря, нажатие кнопки "опубликовать" может запускать цепочку: взять файл с уроком → скомпилировать страницу → выложить на сайт.
Интеграция с другими сервисами: n8n также пригодится для интеграции с корпоративными инструментами. Пример, обсуждавшийся вскользь: если нужно уведомить сотрудников о доступности нового урока, workflow n8n отправит письма или сообщения в чат автоматически. Либо сбор статистики: n8n может периодически собирать данные о прохождении (сколько людей завершили квиз, кто на каком чекпоинте) и складывать в таблицу для аналитики.
Мультимодульность: Хотя n8n – основной кандидат, также упоминались "и др." (и другие) инструменты. Возможно, имелись в виду альтернативы или дополняющие системы: скрипты на Python, средства CI/CD, или специфические плагины LMS. Общий подход – где возможно снять ручную рутину, там внедрить автоматический скрипт или сценарий.
Все предложенные решения нацелены на то, чтобы новая система обучения была масштабируемой, удобной в поддержке и современной. Команда договорилась, что по мере реализации могут открыться новые возможности или, наоборот, какие-то из задуманных подходов придётся скорректировать. Однако, в целом, стратегия ясна: сочетание шаблонов, автоматизации и ручного творчества там, где это необходимо, должно дать наилучший результат.
Организационные моменты: ответственность, документация и дальнейшие шаги

В завершение звонка обсудили организационные вопросы, чтобы перейти от слов к делу. Были определены ответственные за ключевые направления, зафиксировано, что уже сделано (задокументировано), и намечены ближайшие шаги по проекту: Распределение ответственности:
Дизайн и UX: За визуальную концепцию (разработку дорожки, маскота, общего стиля страниц) отвечает дизайнерская команда. Конкретно, ведущий дизайнер (имя не приводим) возьмёт на себя отрисовку маскота и элементов геймификации, а также проработку макета одностраничного урока.
Техническая реализация фронтенда: Ведущий фронтенд-разработчик назначен ответственным за разработку шаблона страницы и компонентов. Его задача – создать все необходимые модульные элементы (текстовые блоки, квиз-интерфейс, прогресс-бар дорожки и т.д.) и собрать из них рабочий прототип урока. Он же будет следить за адаптивностью и производительностью страницы.
Контент и методология: За содержание уроков отвечает методист/контент-менеджер. Ему поручено на первом этапе подготовить материалы для пилотного урока: набросать текст теории, придумать вопросы для квиза и задание. Он же протестирует процесс генерации с помощью ИИ: попробует сгенерировать часть контента и оценить, насколько это эффективно. В дальнейшем этот человек (или команда) будет вести разработку контента для всех уроков, придерживаясь разработанной структуры.
Автоматизация и интеграции: Специалист, знакомый с n8n (в команде есть один инженер DevOps), будет настроивать автоматические процессы. Он проверит, как связать репозиторий с контентом в Markdown с системой сборки сайта. Также его область – интеграция результатов обучения с внутренними системами (например, запись оценок или прогресса в HR-систему, если требуется). Его задача – обеспечить гладкую техническую связность между инструментами.
Координация и документация: Проджект-менеджер или тимлид будет следить за общим прогрессом. Он же отвечает за то, чтобы все договорённости документировались. Уже завели общий документ (например, в Confluence или Google Docs) описывающий концепцию: там фиксируется структура урока, описаны роли компонентов, приведены примеры интерфейса (возможно, эскизы дорожки и маскота, если уже есть). После звонка он обобщит ключевые решения (в том числе используя настоящее саммари) и разошлёт команде, чтобы все были синхронизированы. Этот человек также составит план-график: когда должны быть готовы дизайн-макеты, когда прототип, когда контент, и организует созвоны для контроля.
Что уже задокументировано: На момент звонка у команды имелись некоторые наработки:
Описательный документ с первоначальной концепцией геймифицированного урока (ещё до созвона были идеи, которые изложили на бумаге).
Часть структуры урока была протестирована на бумажной модели: методист набросал пример содержания, а дизайнер – эскиз страницы с дорожкой. Эти материалы будут оцифрованы и положены в общую папку для референса.
Также упоминалось, что технические ограничения и риски начали фиксироваться: создан список возможных проблем (многие из них мы перечислили в разделе "проблемы и ограничения"). Это нужно, чтобы не упустить их в дальнейшей работе.
Инструкция для генерации контента через ИИ: один из участников до звонка экспериментировал с ChatGPT и записал удачные примеры промптов для генерации учебного текста. Эти примеры тоже задокументированы, чтобы другие могли их использовать.
Дальнейшие шаги: Команда очертила ближайший план действий, разделив его на этапы. Ниже приведён список следующих шагов, согласованных по итогам обсуждения:
Прототипирование: Дизайнеры и фронтенд-разработчики совместно создают прототип одной страницы урока. Сначала в виде дизайн-макета (статичная картинка с предполагаемым внешним видом), затем в виде интерактивного прототипа в браузере. Срок – около 1-2 недель. Цель – получить ощутимый пример, который можно показать заинтересованным сторонам и протестировать внутри команды.
Разработка модулей: Параллельно или сразу после прототипа разработчики реализуют основные компоненты: шаблон страницы, компонент квиза (с возможностью нескольких вопросов и показом правильных/неправильных ответов), компонент дорожки прогресса и т.д. Это программирование интерфейса согласно заданному дизайну. Ожидается, что на этом этапе возможны корректировки дизайна, если что-то окажется сложно реализовать или непрактично.
Подготовка контента для пилотного урока: Методист готовит полный материал для одного пилотного урока, используя шаблонную структуру. Он может привлекать экспертов по теме для качества содержания. Также опробует генерацию: например, поручит ИИ сгенерировать 5 тестовых вопросов по теме и выберет лучшие. Контент пишется сразу в Markdown-файле по договорённому шаблону.
Настройка автоматизации: Инженер настраивает workflow (скорее всего, в n8n) для обработки Markdown-файла пилотного урока. Он должен добиться, чтобы из файла можно было автоматизированно получить готовую веб-страницу. Возможно, на этом шаге будут написаны парсер или скрипт конвертации. Также настроят базовые уведомления или логи: например, чтобы команда получала сообщение, если где-то ошибка в контенте (неправильный формат) или успешное обновление урока на сайте.
Тестирование и отзыв: Когда пилотный урок полностью собран (дизайн, контент, техника – всё вместе), его прогоняют несколько членов команды, возможно, привлекают пару рядовых сотрудников для теста. Цель – собрать обратную связь: понятна ли навигация, работает ли геймификация, нравятся ли визуальные элементы, нет ли технических сбоев. Особенно проверят на разных устройствах. Все замечания собираются для доработки.
Доработка и масштабирование: По результатам тестирования вносятся исправления. После этого модель считается подтверждённой, и можно масштабировать: команда распределяет создание оставшихся уроков (методист пишет, дизайнер дорисовывает требуемые вариации графики, разработчики дорабатывают по необходимости функционал). Также можно начать разработку второго стиля или вариации (если запланировано) параллельно, но основной приоритет – выпустить первый курс в новом формате.
Документация и обучение внутренних пользователей: На каждом этапе ответственные обновляют документацию: фиксируют окончательный формат Markdown, инструкцию как добавлять новый урок, как запускать автоматизацию и т.д. В финале планируется провести короткое обучение для остальных команд или коллег, кто будет пользоваться системой – показать, как теперь создаются курсы, где лежат шаблоны, как выглядит процесс публикации. Это важно для принятия нового процесса в организации.
Все участники согласились с намеченным планом. Роли распределены, ближайшие задачи поставлены. Проект нового обучающего процесса переходит в стадию реализации с чётким видением конечной цели: интерактивная, геймифицированная обучающая платформа, которую можно эффективно поддерживать и развивать. Команда ожидает, что новый формат значительно повысит вовлечённость сотрудников в обучение и сделает процесс освоения знаний более интересным и результативным.